@page "/posts"
@using Microsoft.AspNetCore.Authorization
@using Yippy.Web.Models
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<PageTitle>Create New Post - Yippy</PageTitle>

<div class="create-post-container">
    <div class="create-post-header">
        <h1 class="page-title">
            <svg class="title-icon" viewBox="0 0 24 24">
                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" />
            </svg>
            Create New Post
        </h1>
        <p class="page-subtitle">Share your thoughts with the world</p>
    </div>

    <div class="create-post-form">
        <EditForm Model="@_postModel" OnValidSubmit="@HandleValidSubmit" class="post-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" 
                          @bind-Value="_postModel.Title" 
                          class="form-input" 
                          placeholder="Enter an engaging title for your post..." 
                          maxlength="200" />
                <ValidationMessage For="@(() => _postModel.Title)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="body" class="form-label">Content</label>
                <InputTextArea id="body" 
                              @bind-Value="_postModel.Body" 
                              class="form-textarea" 
                              placeholder="Write your post content here. Use markdown for formatting..."
                              rows="15" />
                <ValidationMessage For="@(() => _postModel.Body)" class="validation-message" />
                <div class="form-hint">
                    <svg class="hint-icon" viewBox="0 0 24 24">
                        <path d="M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                    </svg>
                    Markdown formatting is supported
                </div>
            </div>

            <div class="form-actions">
                <button type="button" 
                        class="btn btn-secondary" 
                        @onclick="@(() => Navigation.NavigateTo("/"))">
                    <svg class="btn-icon" viewBox="0 0 24 24">
                        <path d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                    </svg>
                    Cancel
                </button>
                
                <button type="submit" 
                        class="btn btn-primary" 
                        disabled="@_isSubmitting">
                    @if (_isSubmitting)
                    {
                        <div class="btn-spinner"></div>
                        <span>Publishing...</span>
                    }
                    else
                    {
                        <svg class="btn-icon" viewBox="0 0 24 24">
                            <path d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
                        </svg>
                        <span>Publish Post</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="error-toast @(_showError ? "show" : "")">
        <div class="error-content">
            <svg class="error-icon" viewBox="0 0 24 24">
                <path d="M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z" />
            </svg>
            <div class="error-text">
                <h4>Error</h4>
                <p>@_errorMessage</p>
            </div>
            <button class="error-close" @onclick="@(() => _showError = false)">
                <svg viewBox="0 0 24 24">
                    <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" />
                </svg>
            </button>
        </div>
    </div>
}

@code {
    private readonly CreatePostModel _postModel = new();
    private bool _isSubmitting;
    private string _errorMessage = string.Empty;
    private bool _showError;

    private async Task HandleValidSubmit()
    {
        _isSubmitting = true;
        _errorMessage = string.Empty;
        _showError = false;

        try
        {
            var response = await HttpClient.PostAsJsonAsync("/posts", _postModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreatePostResponse>();
                Navigation.NavigateTo($"/posts/{result!.Id}");
                return;
            }
            
            _errorMessage = "Failed to create post. Please try again.";
            _showError = true;
        }
        catch (HttpRequestException)
        {
            _errorMessage = "Network error. Please check your connection and try again.";
            _showError = true;
        }
        catch (Exception)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
            _showError = true;
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showError && firstRender)
        {
            await Task.Delay(100);
            StateHasChanged();
        }
    }
}

<style>
    .create-post-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 0;
    }

    .create-post-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-title {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        font-size: 2.5rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 50%, #1e40af 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .title-icon {
        width: 2.5rem;
        height: 2.5rem;
        color: #3b82f6;
        fill: currentColor;
    }

    .page-subtitle {
        font-size: 1.125rem;
        color: #64748b;
        font-weight: 400;
    }

    .create-post-form {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 2.5rem;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        border: 1px solid rgba(226, 232, 240, 0.8);
    }

    .form-group {
        margin-bottom: 2rem;
    }

    .form-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .form-input,
    .form-textarea {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #1e293b;
        background: #ffffff;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        resize: vertical;
    }

    .form-input:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        transform: translateY(-1px);
    }

    .form-textarea {
        min-height: 350px;
        font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
        line-height: 1.6;
    }

    .form-hint {
        display: flex;
        align-items: center;
        gap: 0.375rem;
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: #64748b;
    }

    .hint-icon {
        width: 1rem;
        height: 1rem;
        fill: currentColor;
    }

    .validation-message {
        display: block;
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: #ef4444;
        font-weight: 500;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2.5rem;
        padding-top: 2rem;
        border-top: 1px solid #f1f5f9;
    }

    .btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.875rem 1.75rem;
        border: none;
        border-radius: 0.75rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.7;
    }

    .btn-icon {
        width: 1.125rem;
        height: 1.125rem;
        fill: currentColor;
    }

    .btn-secondary {
        background: #f8fafc;
        color: #64748b;
        border: 2px solid #e2e8f0;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #f1f5f9;
        color: #475569;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        border: 2px solid transparent;
    }

    .btn-primary:hover:not(:disabled) {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
    }

    .btn-spinner {
        width: 1rem;
        height: 1rem;
        border: 2px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-toast {
        position: fixed;
        top: 2rem;
        right: 2rem;
        z-index: 1000;
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 0.75rem;
        padding: 1rem;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        transform: translateX(100%);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .error-toast {
        transform: translateX(0);
        opacity: 1;
    }

    .error-content {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .error-icon {
        width: 1.25rem;
        height: 1.25rem;
        color: #ef4444;
        fill: currentColor;
        flex-shrink: 0;
        margin-top: 0.125rem;
    }

    .error-text h4 {
        font-size: 0.875rem;
        font-weight: 600;
        color: #991b1b;
        margin-bottom: 0.25rem;
    }

    .error-text p {
        font-size: 0.875rem;
        color: #7f1d1d;
        line-height: 1.5;
    }

    .error-close {
        background: none;
        border: none;
        color: #ef4444;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.375rem;
        transition: background-color 0.2s ease;
        margin-left: auto;
        flex-shrink: 0;
    }

    .error-close:hover {
        background: rgba(239, 68, 68, 0.1);
    }

    .error-close svg {
        width: 1rem;
        height: 1rem;
        fill: currentColor;
    }

    @@media (max-width: 768px) {
        .create-post-container {
            padding: 1rem;
        }

        .create-post-form {
            padding: 1.5rem;
        }

        .page-title {
            font-size: 2rem;
        }

        .form-actions {
            flex-direction: column;
        }

        .error-toast {
            top: 1rem;
            right: 1rem;
            left: 1rem;
            max-width: none;
        }
    }
</style>