@page "/posts/{id:guid}"
@using Yippy.Web.Models
@using Markdig
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IAuthService AuthService

<PageTitle>@(_post?.Title ?? "Loading...") - Yippy</PageTitle>

@if (_isLoading)
{
    <div class="loading-container">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <h2 class="loading-title">Loading Post...</h2>
            <p class="loading-subtitle">Please wait while we fetch the content</p>
        </div>
    </div>
}
else if (_post == null)
{
    <div class="error-container">
        <div class="error-content">
            <svg class="error-icon" viewBox="0 0 24 24">
                <path d="M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z" />
            </svg>
            <h2 class="error-title">Post Not Found</h2>
            <p class="error-subtitle">The post you're looking for doesn't exist or has been removed.</p>
            <div class="error-actions">
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">
                    <svg class="btn-icon" viewBox="0 0 24 24">
                        <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
                    </svg>
                    Go Home
                </button>
            </div>
        </div>
    </div>
}
else
{
    <article class="post-container">
        <header class="post-header">
            <div class="post-meta">
                <time class="meta-date" datetime="@_post.CreatedAtUtc.ToString("yyyy-MM-dd")">
                    @_post.CreatedAtUtc.ToString("MMM dd, yyyy")
                </time>
                
                @if (_post.Revisions.Count > 0)
                {
                    <span class="meta-separator">â€¢</span>
                    <span class="meta-revisions">@_post.Revisions.Count revision@(_post.Revisions.Count == 1 ? "" : "s")</span>
                }
                
                @if (_canEdit)
                {
                    <div class="post-actions">
                        <button class="btn btn-sm btn-danger" @onclick="ShowDeleteConfirmation" disabled="@_isDeleting">
                            @if (_isDeleting)
                            {
                                <div class="btn-spinner"></div>
                            }
                            else
                            {
                                <svg class="btn-icon" viewBox="0 0 24 24">
                                    <path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" />
                                </svg>
                            }
                            Delete
                        </button>
                    </div>
                }
            </div>
            
            <h1 class="post-title">@_post.Title</h1>
        </header>

        <div class="post-content">
            @((MarkupString)_renderedMarkdown)
        </div>

        @if (_post.Revisions.Count > 0)
        {
            <aside class="post-revisions">
                <h3 class="revisions-title">
                    <svg class="revisions-icon" viewBox="0 0 24 24">
                        <path d="M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3" />
                    </svg>
                    Revision History
                </h3>
                <div class="revisions-list">
                    @foreach (var revision in _post.Revisions.OrderByDescending(r => r.CreatedAtUtc))
                    {
                        <div class="revision-item">
                            <div class="revision-info">
                                <time class="revision-date" datetime="@revision.CreatedAtUtc.ToString("yyyy-MM-dd")">
                                    @revision.CreatedAtUtc.ToString("MMM dd, yyyy 'at' HH:mm")
                                </time>
                                <span class="revision-author">
                                    User @revision.UserId.ToString()[..8]...
                                </span>
                            </div>
                        </div>
                    }
                </div>
            </aside>
        }
    </article>
}

<ConfirmationDialog 
    IsVisible="_showDeleteDialog"
    Title="Delete Post"
    Message="Are you sure you want to delete this post? This action cannot be undone."
    ConfirmText="Delete Post"
    IconClass="danger"
    ConfirmButtonClass="btn-danger"
    IsProcessing="_isDeleting"
    OnConfirm="ConfirmDelete"
    OnCancel="CancelDelete" />

<Toast 
    IsVisible="_showToast"
    Type="_toastType"
    Title="_toastTitle"
    Message="_toastMessage"
    OnHide="HideToast" />

@code {
    [Parameter] public Guid Id { get; set; }
    
    private PostDto? _post;
    private bool _isLoading = true;
    private bool _canEdit;
    private bool _isDeleting;
    private bool _showDeleteDialog;
    private string _renderedMarkdown = string.Empty;
    
    // Toast properties
    private bool _showToast;
    private Toast.ToastType _toastType = Toast.ToastType.Info;
    private string _toastTitle = string.Empty;
    private string _toastMessage = string.Empty;

    private static readonly MarkdownPipeline MarkdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseSoftlineBreakAsHardlineBreak()
        .Build();

    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
        await CheckEditPermissions();
    }

    private async Task LoadPost()
    {
        try
        {
            var response = await HttpClient.GetAsync($"/posts/{Id}");
            
            if (response.IsSuccessStatusCode)
            {
                _post = await response.Content.ReadFromJsonAsync<PostDto>();
                if (_post != null)
                {
                    _renderedMarkdown = Markdown.ToHtml(_post.Body, MarkdownPipeline);
                }
            }
        }
        catch (Exception)
        {
            // Handle error silently, _post will remain null
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CheckEditPermissions()
    {
        var authState = await AuthService.GetAuthStateAsync();
        _canEdit = authState?.IsAuthenticated == true;
    }

    private void ShowDeleteConfirmation()
    {
        _showDeleteDialog = true;
    }

    private void CancelDelete()
    {
        _showDeleteDialog = false;
    }

    private async Task ConfirmDelete()
    {
        _isDeleting = true;
        
        try
        {
            var response = await HttpClient.DeleteAsync($"/posts/{Id}");
            
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                ShowToast(Toast.ToastType.Error, "Delete Failed", "Failed to delete the post. Please try again.");
            }
        }
        catch (Exception)
        {
            ShowToast(Toast.ToastType.Error, "Error", "An error occurred while deleting the post.");
        }
        finally
        {
            _isDeleting = false;
            _showDeleteDialog = false;
        }
    }

    private void ShowToast(Toast.ToastType type, string title, string message)
    {
        _toastType = type;
        _toastTitle = title;
        _toastMessage = message;
        _showToast = true;
        StateHasChanged();
    }

    private void HideToast()
    {
        _showToast = false;
    }
}

<style>
    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 50vh;
        padding: 2rem;
    }

    .loading-content {
        text-align: center;
        max-width: 400px;
    }

    .loading-spinner {
        width: 2.5rem;
        height: 2.5rem;
        border: 3px solid #e2e8f0;
        border-top: 3px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    .loading-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .loading-subtitle {
        color: #64748b;
        font-size: 0.875rem;
    }

    .error-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 50vh;
        padding: 2rem;
    }

    .error-content {
        text-align: center;
        max-width: 500px;
    }

    .error-icon {
        width: 3rem;
        height: 3rem;
        color: #ef4444;
        fill: currentColor;
        margin: 0 auto 1rem;
    }

    .error-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .error-subtitle {
        font-size: 1rem;
        color: #64748b;
        margin-bottom: 1.5rem;
        line-height: 1.5;
    }

    .error-actions {
        display: flex;
        justify-content: center;
    }

    .post-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1.5rem;
    }

    .post-header {
        margin-bottom: 2rem;
    }

    .post-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
        font-size: 0.875rem;
        color: #64748b;
    }

    .meta-date {
        font-weight: 500;
    }

    .meta-separator {
        color: #d1d5db;
    }

    .meta-revisions {
        font-weight: 400;
    }

    .post-actions {
        margin-left: auto;
    }

    .post-title {
        font-size: 2.25rem;
        font-weight: 800;
        line-height: 1.2;
        color: #1e293b;
        margin: 0;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.8125rem;
    }

    .btn-icon {
        width: 0.875rem;
        height: 0.875rem;
        fill: currentColor;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-danger {
        background: #ef4444;
        color: white;
    }

    .btn-danger:hover:not(:disabled) {
        background: #dc2626;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .btn-spinner {
        width: 0.875rem;
        height: 0.875rem;
        border: 2px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .post-content {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 2.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(226, 232, 240, 0.8);
        line-height: 1.7;
        font-size: 1rem;
        color: #374151;
    }

    .post-content h1,
    .post-content h2,
    .post-content h3,
    .post-content h4,
    .post-content h5,
    .post-content h6 {
        color: #1e293b;
        font-weight: 700;
        margin: 2rem 0 1rem 0;
        line-height: 1.3;
    }

    .post-content h1 {
        font-size: 1.875rem;
        border-bottom: 2px solid #e2e8f0;
        padding-bottom: 0.5rem;
    }

    .post-content h2 {
        font-size: 1.5rem;
    }

    .post-content h3 {
        font-size: 1.25rem;
    }

    .post-content h4 {
        font-size: 1.125rem;
    }

    .post-content p {
        margin-bottom: 1.25rem;
    }

    .post-content ul,
    .post-content ol {
        margin-bottom: 1.25rem;
        padding-left: 1.5rem;
    }

    .post-content li {
        margin-bottom: 0.5rem;
    }

    .post-content blockquote {
        border-left: 4px solid #3b82f6;
        padding-left: 1rem;
        margin: 1.5rem 0;
        font-style: italic;
        color: #64748b;
    }

    .post-content pre {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        padding: 1rem;
        overflow-x: auto;
        margin: 1.25rem 0;
        font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
        font-size: 0.875rem;
        line-height: 1.5;
    }

    .post-content code {
        background: #f1f5f9;
        color: #1e40af;
        padding: 0.125rem 0.375rem;
        border-radius: 0.25rem;
        font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
        font-size: 0.875em;
    }

    .post-content pre code {
        background: none;
        color: inherit;
        padding: 0;
        border-radius: 0;
    }

    .post-content strong {
        font-weight: 700;
        color: #1e293b;
    }

    .post-content em {
        font-style: italic;
    }

    .post-content a {
        color: #3b82f6;
        text-decoration: underline;
        text-decoration-color: rgba(59, 130, 246, 0.3);
        text-underline-offset: 2px;
        transition: all 0.2s ease;
    }

    .post-content a:hover {
        color: #1d4ed8;
        text-decoration-color: #1d4ed8;
    }

    .post-content table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.25rem 0;
        font-size: 0.875rem;
    }

    .post-content th,
    .post-content td {
        border: 1px solid #e2e8f0;
        padding: 0.75rem;
        text-align: left;
    }

    .post-content th {
        background: #f8fafc;
        font-weight: 600;
        color: #1e293b;
    }

    .post-revisions {
        background: rgba(248, 250, 252, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 1.5rem;
        border: 1px solid rgba(226, 232, 240, 0.8);
    }

    .revisions-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 1rem;
    }

    .revisions-icon {
        width: 1rem;
        height: 1rem;
        color: #3b82f6;
        fill: currentColor;
    }

    .revisions-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .revision-item {
        background: white;
        border-radius: 0.5rem;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        transition: all 0.2s ease;
        font-size: 0.875rem;
    }

    .revision-item:hover {
        border-color: #3b82f6;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
    }

    .revision-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .revision-date {
        font-weight: 500;
        color: #1e293b;
    }

    .revision-author {
        color: #64748b;
        font-family: 'JetBrains Mono', 'Fira Code', Consolas, 'Courier New', monospace;
        font-size: 0.8125rem;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @@media (min-width: 1024px) {
        .post-container {
            max-width: 900px;
        }

        .post-content {
            padding: 3rem;
        }
    }

    @@media (min-width: 1280px) {
        .post-container {
            max-width: 1000px;
        }
    }

    @@media (max-width: 768px) {
        .post-container {
            padding: 1rem;
        }

        .post-title {
            font-size: 1.875rem;
        }

        .post-content {
            padding: 1.5rem;
        }

        .post-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .post-actions {
            margin-left: 0;
        }

        .revision-info {
            flex-direction: column;
            align-items: flex-start;
        }

        .post-content h1 {
            font-size: 1.5rem;
        }

        .post-content h2 {
            font-size: 1.25rem;
        }

        .post-content h3 {
            font-size: 1.125rem;
        }
    }
</style>