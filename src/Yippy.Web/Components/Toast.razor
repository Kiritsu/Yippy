@if (IsVisible)
{
    <div class="toast @TypeClass @(IsVisible ? "show" : "")" @onclick="Hide">
        <div class="toast-content">
            <div class="toast-icon">
                @if (Type == ToastType.Success)
                {
                    <svg viewBox="0 0 24 24">
                        <path d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M11,16.5L18,9.5L16.59,8.09L11,13.67L7.41,10.09L6,11.5L11,16.5Z" />
                    </svg>
                }
                else if (Type == ToastType.Error)
                {
                    <svg viewBox="0 0 24 24">
                        <path d="M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z" />
                    </svg>
                }
                else if (Type == ToastType.Warning)
                {
                    <svg viewBox="0 0 24 24">
                        <path d="M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                    </svg>
                }
                else
                {
                    <svg viewBox="0 0 24 24">
                        <path d="M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                    </svg>
                }
            </div>
            
            <div class="toast-text">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h4 class="toast-title">@Title</h4>
                }
                <p class="toast-message">@Message</p>
            </div>
            
            <button type="button" class="toast-close" @onclick="Hide" @onclick:stopPropagation="true">
                <svg viewBox="0 0 24 24">
                    <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" />
                </svg>
            </button>
        </div>
        
        @if (AutoHide)
        {
            <div class="toast-progress">
                <div class="toast-progress-bar" style="animation-duration: @(Duration)ms;"></div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public ToastType Type { get; set; } = ToastType.Info;
    [Parameter] public bool AutoHide { get; set; } = true;
    [Parameter] public int Duration { get; set; } = 5000;
    [Parameter] public EventCallback OnHide { get; set; }

    private string TypeClass => Type switch
    {
        ToastType.Success => "toast-success",
        ToastType.Error => "toast-error",
        ToastType.Warning => "toast-warning",
        _ => "toast-info"
    };

    private Timer? _timer;

    protected override void OnParametersSet()
    {
        if (IsVisible && AutoHide)
        {
            StartAutoHideTimer();
        }
    }

    private void StartAutoHideTimer()
    {
        _timer?.Dispose();
        _timer = new Timer(async _ => 
        {
            await InvokeAsync(Hide);
        }, null, Duration, Timeout.Infinite);
    }

    private async Task Hide()
    {
        _timer?.Dispose();
        IsVisible = false;
        await OnHide.InvokeAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}

@code {
    public enum ToastType
    {
        Info,
        Success,
        Warning,
        Error
    }
}

<style>
    .toast {
        position: fixed;
        top: 2rem;
        right: 2rem;
        z-index: 1000;
        min-width: 300px;
        max-width: 400px;
        border-radius: 0.75rem;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        transform: translateX(100%);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
        overflow: hidden;
    }

    .toast.show {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-content {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 1rem;
    }

    .toast-icon {
        flex-shrink: 0;
        width: 1.25rem;
        height: 1.25rem;
        margin-top: 0.125rem;
    }

    .toast-icon svg {
        width: 100%;
        height: 100%;
        fill: currentColor;
    }

    .toast-text {
        flex: 1;
        min-width: 0;
    }

    .toast-title {
        font-size: 0.875rem;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
        line-height: 1.25;
    }

    .toast-message {
        font-size: 0.875rem;
        line-height: 1.4;
        margin: 0;
    }

    .toast-close {
        flex-shrink: 0;
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.375rem;
        transition: background-color 0.2s ease;
        margin-top: -0.125rem;
        margin-right: -0.25rem;
    }

    .toast-close svg {
        width: 1rem;
        height: 1rem;
        fill: currentColor;
    }

    .toast-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.3);
    }

    .toast-progress-bar {
        height: 100%;
        background: currentColor;
        transform-origin: left;
        animation: progress linear forwards;
    }

    /* Toast Types */
    .toast-success {
        background: #dcfce7;
        border: 1px solid #bbf7d0;
        color: #166534;
    }

    .toast-success .toast-close:hover {
        background: rgba(22, 101, 52, 0.1);
    }

    .toast-error {
        background: #fef2f2;
        border: 1px solid #fecaca;
        color: #991b1b;
    }

    .toast-error .toast-close:hover {
        background: rgba(153, 27, 27, 0.1);
    }

    .toast-warning {
        background: #fffbeb;
        border: 1px solid #fed7aa;
        color: #9a3412;
    }

    .toast-warning .toast-close:hover {
        background: rgba(154, 52, 18, 0.1);
    }

    .toast-info {
        background: #eff6ff;
        border: 1px solid #bfdbfe;
        color: #1e40af;
    }

    .toast-info .toast-close:hover {
        background: rgba(30, 64, 175, 0.1);
    }

    @@keyframes progress {
        from {
            transform: scaleX(1);
        }
        to {
            transform: scaleX(0);
        }
    }

    @@media (max-width: 768px) {
        .toast {
            top: 1rem;
            right: 1rem;
            left: 1rem;
            min-width: auto;
            max-width: none;
        }
    }
</style>